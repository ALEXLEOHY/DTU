---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by alex.
--- DateTime: 2023/7/7 15:21
---
---
require("keyWord")

function readConfig()
    --0:mqtt  1：tcp   2：mqcp
    local mode = fdb.kv_get("mode")
    if mode == 1 then
        readMqttConfig()
    elseif mode == 2 then
        readTcpConfig()
    else
        log.info("未知配置模式")
    end
end

function saveConfig(uartJsonData)
    local mode = fdb.kv_set("mode", uartJsonData.mode)
    if uartJsonData.mode == 1 and mode ~= nil then
        log.info("mqtt配置模式")
        mqttConfig(uartJsonData)
    elseif uartJsonData.mode == 2 and mode ~= nil then
        log.info("tcp配置模式")
        tcpConfig(uartJsonData)
    else
        log.info("未知模式")
    end
end

function mqttConfig(uartJsonData)
    local jsonData = json.encode(uartJsonData)

    fdbSave(uartKeyWords.baudRate, uartJsonData.baudRate)
    fdbSave(uartKeyWords.dataBit, uartJsonData.dataBit)
    fdbSave(uartKeyWords.stopBit, uartJsonData.stopBit)
    fdbSave(uartKeyWords.checkDigit, uartJsonData.checkDigit)
    fdbSave("mode", uartJsonData.mode)
    fdbSave(mqttKeyWords.mqttUrl, uartJsonData.mqttUrl)
    fdbSave(mqttKeyWords.mqttPort, uartJsonData.mqttPort)
    fdbSave(mqttKeyWords.clientId, uartJsonData.clientId)
    fdbSave(mqttKeyWords.customClientId, uartJsonData.cusClientId)
    fdbSave(mqttKeyWords.userName, uartJsonData.userName)
    fdbSave(mqttKeyWords.passWord, uartJsonData.passWord)
    fdbSave(mqttKeyWords.subscribeFor, uartJsonData.subFor)
    fdbSave(mqttKeyWords.subscribeClient, uartJsonData.subClient)
    fdbSave(mqttKeyWords.subscribeBk, uartJsonData.subBk)
    fdbSave(mqttKeyWords.subscribeQos, uartJsonData.subQos)
    fdbSave(mqttKeyWords.publishFor, uartJsonData.pubFor)
    fdbSave(mqttKeyWords.publishClient, uartJsonData.pubClient)
    fdbSave(mqttKeyWords.publishBk, uartJsonData.pubBk)
    fdbSave(mqttKeyWords.publishQos, uartJsonData.pubQos)
    -- 需要判断存储问题
    --checkPrint(mode,mqcpUrl,mqcpPort,id,sn,key)
    readMqttConfig()
end

function tcpConfig(uartJsonData)

    fdbSave(uartKeyWords.baudRate, uartJsonData.baudRate)
    fdbSave(uartKeyWords.dataBit, uartJsonData.dataBit)
    fdbSave(uartKeyWords.stopBit, uartJsonData.stopBit)
    fdbSave(uartKeyWords.checkDigit, uartJsonData.checkDigit)

    fdbSave("mode", uartJsonData.mode)

    fdbSave(tcpKeyWords.tcpUrl, uartJsonData.tcpUrl)
    fdbSave(tcpKeyWords.tcpPort, uartJsonData.tcpPort)
    fdbSave(tcpKeyWords.tcpOrUdp, uartJsonData.tcpOrUdp)
    fdbSave(tcpKeyWords.regType, uartJsonData.regType)
    fdbSave(tcpKeyWords.regData, uartJsonData.regData)
    fdbSave(tcpKeyWords.heartType, uartJsonData.heartType)
    fdbSave(tcpKeyWords.heartData, uartJsonData.heartData)
    fdbSave(tcpKeyWords.heartTime, uartJsonData.heartTime)

    readTcpConfig()

end

function mqcpConfig(uartJsonData)
    local mode = fdb.kv_set("mode", uartJsonData.mode)
    local mqcpUrl = fdb.kv_set("mqcpUrl", uartJsonData.mqcpUrl)
    local mqcpPort = fdb.kv_set("mqcpPort", uartJsonData.mqcpPort)
    local id = fdb.kv_set("id", uartJsonData.id)
    local sn = fdb.kv_set("sn", uartJsonData.sn)
    local key = fdb.kv_set("key", uartJsonData.key)
    --checkPrint(mode,mqcpUrl,mqcpPort,id,sn,key)
    print(mode, mqcpUrl, mqcpPort, id, sn, key)
    --配置完读取
    readMqcpConfig()
end

function readMqcpConfig()
    local mode = fdb.kv_get("mode")
    local mqcpUrl = fdb.kv_get("mqcpUrl")
    local mqcpPort = fdb.kv_get("mqcpPort")
    local id = fdb.kv_get("id")
    local sn = fdb.kv_get("sn")
    local key = fdb.kv_get("key")

    local mqcpTableData = { ["mode"] = mode, ["mqcpUrl"] = mqcpUrl, ["mqcpPort"] = mqcpPort, ["id"] = id, ["sn"] = sn, ["key"] = key }
    print(table.concat(mqcpTableData))
    local jsonData = json.encode(mqcpTableData)
    print(jsonData)
    uartSendCrc(jsonData)
end

function readMqttConfig()
    local baudRate = fdb.kv_get(uartKeyWords.baudRate)
    local dataBits = fdb.kv_get(uartKeyWords.dataBit)
    local stopBits = fdb.kv_get(uartKeyWords.stopBit)
    local checkDigit = fdb.kv_get(uartKeyWords.checkDigit)
    local mode = fdb.kv_get("mode")
    local mqttUrl = fdb.kv_get(mqttKeyWords.mqttUrl)
    local mqttPort = fdb.kv_get(mqttKeyWords.mqttPort)
    local clientId = fdb.kv_get(mqttKeyWords.clientId)
    local customClientId = fdb.kv_get(mqttKeyWords.customClientId)
    local userName = fdb.kv_get(mqttKeyWords.userName)
    local passWord = fdb.kv_get(mqttKeyWords.passWord)
    local subscribeFor = fdb.kv_get(mqttKeyWords.subscribeFor)
    local subscribeClient = fdb.kv_get(mqttKeyWords.subscribeClient)
    local subscribeBk = fdb.kv_get(mqttKeyWords.subscribeBk)
    local subscribeQos = fdb.kv_get(mqttKeyWords.subscribeQos)
    local publishFor = fdb.kv_get(mqttKeyWords.publishFor)
    local publishClient = fdb.kv_get(mqttKeyWords.publishClient)
    local publishBk = fdb.kv_get(mqttKeyWords.publishBk)
    local publishQos = fdb.kv_get(mqttKeyWords.publishQos)

    local mqcpTableData = { [uartKeyWords.baudRate] = baudRate,
                            [uartKeyWords.dataBit] = dataBits,
                            [uartKeyWords.stopBit] = stopBits,
                            [uartKeyWords.checkDigit] = checkDigit,
                            ["mode"] = mode,
                            [mqttKeyWords.mqttUrl] = mqttUrl,
                            [mqttKeyWords.mqttPort] = mqttPort,
                            [mqttKeyWords.clientId] = clientId,
                            [mqttKeyWords.customClientId] = customClientId,
                            [mqttKeyWords.userName] = userName,
                            [mqttKeyWords.passWord] = passWord,
                            [mqttKeyWords.subscribeFor] = subscribeFor,
                            [mqttKeyWords.subscribeClient] = subscribeClient,
                            [mqttKeyWords.subscribeBk] = subscribeBk,
                            [mqttKeyWords.subscribeQos] = subscribeQos,
                            [mqttKeyWords.publishFor] = publishFor,
                            [mqttKeyWords.publishClient] = publishClient,
                            [mqttKeyWords.publishBk] = publishBk,
                            [mqttKeyWords.publishQos] = publishQos,
                            ["ddkConfigRead"] = true }
    print(table.concat(mqcpTableData))
    local jsonData = json.encode(mqcpTableData)
    print(jsonData)
    uartSendCrc(jsonData)
end

function readTcpConfig()
    local baudRate = fdb.kv_get(uartKeyWords.baudRate)
    local dataBits = fdb.kv_get(uartKeyWords.dataBit)
    local stopBits = fdb.kv_get(uartKeyWords.stopBit)
    local checkDigit = fdb.kv_get(uartKeyWords.checkDigit)
    local mode = fdb.kv_get("mode")

    local tcpUrl = fdb.kv_get(tcpKeyWords.tcpUrl)
    local tcpPort = fdb.kv_get(tcpKeyWords.tcpPort)
    local tcpOrUdp = fdb.kv_get(tcpKeyWords.tcpOrUdp)
    local regType = fdb.kv_get(tcpKeyWords.regType)
    local regData = fdb.kv_get(tcpKeyWords.regData)
    local heartType = fdb.kv_get(tcpKeyWords.heartType)
    local heartData = fdb.kv_get(tcpKeyWords.heartData)
    local heartTime = fdb.kv_get(tcpKeyWords.heartTime)

    local tcpTableData = { [uartKeyWords.baudRate] = baudRate,
                           [uartKeyWords.dataBit] = dataBits,
                           [uartKeyWords.stopBit] = stopBits,
                           [uartKeyWords.checkDigit] = checkDigit,
                           ["mode"] = mode,
                           [tcpKeyWords.tcpUrl] = tcpUrl,
                           [tcpKeyWords.tcpPort] = tcpPort,
                           [tcpKeyWords.tcpOrUdp] = tcpOrUdp,
                           [tcpKeyWords.regType] = regType,
                           [tcpKeyWords.regData] = regData,
                           [tcpKeyWords.heartType] = heartType,
                           [tcpKeyWords.heartData] = heartData,
                           [tcpKeyWords.heartTime] = heartTime,
                           ["ddkConfigRead"] = true }
    print(table.concat(tcpTableData))
    local jsonData = json.encode(tcpTableData)
    print(jsonData)
    uartSendCrc(jsonData)
end

--带nil处理
function fdbSave(keyWord, jsonData)
    if keyWord then
        if jsonData ~="" and jsonData~= nil then

            local saveResult = fdb.kv_set(keyWord, jsonData)
            if saveResult then
                log.info(keyWord, "保存成功,数据为", jsonData)
            else
                log.info(keyWord, "保存失败,正在初始化默认数据")
                local nilResult = fdb.kv_set(keyWord, "")
                if nilResult then
                    log.info(keyWord, "初始化默认数据")
                else
                    log.info(keyWord, "初始化默认数据失败")
                end
            end
        else
            fdb.kv_set(keyWord, "")
            log.info(keyWord, "没有数据，初始化默认")
        end
    end

end

function checkPrint (...)
    for i, v in pairs(arg) do
        print("key", i, "value", v)
    end
end
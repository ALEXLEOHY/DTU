---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by alex.
--- DateTime: 2023/6/28 15:20
---
require("mqttnet")
require("keyWord")

local mqtt_host = ""
local mqtt_port = 1883
local mqtt_isssl = false
--1,imei/2,iccid/3,自定义
local client_id = ""

local custom_client_id = ""
local user_name = ""
local passWord = ""

local subscribeFor = ""
local subscribeBk = ""
local subscribeClient = true
local subscribeQos = 0
local custom_subscribe = ""

local publishFor = ""
local publishBk = ""
local publishClient = true
local publishQos = 0
local custom_publish = ""

function initMqttConfig()
    mqtt_host = fdb.kv_get(mqttKeyWords.mqttUrl)
    mqtt_port = fdb.kv_get(mqttKeyWords.mqttPort)
    mqtt_isssl = fdb.kv_get(mqttKeyWords.mqttSSL) == nil and false or fdb.kv_get(mqttKeyWords.mqttSSL)

    client_id = fdb.kv_get(mqttKeyWords.clientId) == nil and "" or fdb.kv_get(mqttKeyWords.clientId)
    if client_id == 1 and mobile.imei() then
        custom_client_id = mobile.imei()
    elseif client_id == 2 and mobile.iccid() then
        custom_client_id = mobile.iccid()
    elseif client_id == 3 then
        custom_client_id = fdb.kv_get(mqttKeyWords.customClientId) == nil and "" or fdb.kv_get(mqttKeyWords.customClientId)
    else
        log.info("client_id配置出错，生成随机数使用")
        custom_client_id = crypto.trng(5)
    end

    user_name = fdb.kv_get(mqttKeyWords.userName) == nil and "" or fdb.kv_get(mqttKeyWords.userName)
    passWord = fdb.kv_get(mqttKeyWords.passWord) == nil and "" or fdb.kv_get(mqttKeyWords.passWord)

    subscribeFor = fdb.kv_get(mqttKeyWords.subscribeFor) == nil and "" or fdb.kv_get(mqttKeyWords.subscribeFor)
    subscribeBk = fdb.kv_get(mqttKeyWords.subscribeBk) == nil and "" or fdb.kv_get(mqttKeyWords.subscribeBk)

    subscribeClient = fdb.kv_get(mqttKeyWords.subscribeClient) == nil and "" or fdb.kv_get(mqttKeyWords.subscribeClient)
    --订阅clientID是否启用
    if subscribeClient == 1 then
        custom_subscribe = subscribeFor .. custom_client_id .. subscribeBk
    elseif subscribeClient == 2 then
        custom_subscribe = subscribeFor .. subscribeBk
    end
    subscribeQos = fdb.kv_get(mqttKeyWords.subscribeQos) == nil and "" or fdb.kv_get(mqttKeyWords.subscribeQos)

    publishFor = fdb.kv_get(mqttKeyWords.publishFor) == nil and "" or fdb.kv_get(mqttKeyWords.publishFor)
    publishBk = fdb.kv_get(mqttKeyWords.publishBk) == nil and "" or fdb.kv_get(mqttKeyWords.publishBk)
    publishClient = fdb.kv_get(mqttKeyWords.publishClient) == nil and "" or fdb.kv_get(mqttKeyWords.publishClient)
    --订阅clientID是否启用
    if publishClient == 1 then
        custom_publish = publishFor .. custom_client_id .. publishBk
    elseif publishClient == 2 then
        custom_publish = publishFor .. publishBk
    end
    publishQos = fdb.kv_get(mqttKeyWords.publishQos) == nil and "" or fdb.kv_get(mqttKeyWords.publishQos)
    if mqtt_host and mqtt_port and mqtt_host ~= "" and mqtt_port ~= "" then
        initMqttConnect(mqtt_host, mqtt_port, mqtt_isssl, custom_client_id, user_name, passWord, custom_subscribe, subscribeQos, custom_publish, publishQos)

        print(mqtt_host, mqtt_port, mqtt_isssl, custom_client_id, user_name, passWord, custom_subscribe, subscribeQos, custom_publish, publishQos)
    else
        log.info("MQTT模式连接配置失败，mqtt_host and mqtt_port 为空")
    end
end


-- 处理串口数据，分发
function handleUartToMqtt(uartData)

    print("MQTT模式接收到串口数据", uartData)

    if mqttc then
        print("发布主题", custom_publish)
        mqttc:publish(custom_publish, uartData, publishQos)
    else
        log.info("mqtt未连接")
    end

end








